# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZGTRH3toVfDd-dHPuAkCJqJnYeoCCJdR
"""

pip install streamlit pandas matplotlib wordcloud networkx plotly openpyxl

import streamlit as st
import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from collections import Counter
import networkx as nx
import plotly.graph_objects as go

st.set_page_config(page_title="Îâ¥Ïä§ ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÌîåÎû´Ìèº", layout="wide")
st.title("üì∞ Îâ¥Ïä§ ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÌîåÎû´Ìèº")

uploaded_file = st.file_uploader("Î∂ÑÏÑùÌï† Îâ¥Ïä§ Í∏∞ÏÇ¨ Excel ÌååÏùº (.xlsx)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # üîç Ïù∏ÌÑ∞ÎûôÌã∞Î∏å Ìëú (ÏÑ†ÌÉù Ïó¥Îßå)
    st.subheader("üîç ÏàòÏßëÎêú Îâ¥Ïä§ Îç∞Ïù¥ÌÑ∞ ÎØ∏Î¶¨Î≥¥Í∏∞")
    selected_columns = ["ÏùºÏûê", "Ï†úÎ™©", "Í∏∞Í¥Ä", "ÌÇ§ÏõåÎìú", "url"]
    filtered_df = df[selected_columns] if all(col in df.columns for col in selected_columns) else df
    st.dataframe(filtered_df, use_container_width=True, hide_index=True)

    # ‚ë† Ïó∞ÎèÑÎ≥Ñ Í∏∞ÏÇ¨Îüâ Î∂ÑÏÑù
    st.subheader("‚ë† Ïó∞ÎèÑÎ≥Ñ Í∏∞ÏÇ¨Îüâ Î∂ÑÏÑù")
    df["ÏùºÏûê"] = pd.to_datetime(df["ÏùºÏûê"], format="%Y%m%d", errors="coerce")
    df["Ïó∞ÎèÑ"] = df["ÏùºÏûê"].dt.year
    year_counts = df["Ïó∞ÎèÑ"].value_counts().sort_index()
    st.bar_chart(year_counts)

    # ‚ë° Ïó∞Í¥ÄÏñ¥ ÏõåÎìúÌÅ¥ÎùºÏö∞Îìú
    st.subheader("‚ë° Ïó∞Í¥ÄÏñ¥ ÏõåÎìúÌÅ¥ÎùºÏö∞Îìú")
    all_keywords = ",".join(df["ÌÇ§ÏõåÎìú"].dropna().astype(str)).split(",")
    filtered_keywords = [kw.strip() for kw in all_keywords if len(kw.strip()) > 1]
    keyword_freq = Counter(filtered_keywords)
    top_keywords = dict(keyword_freq.most_common(100))

    wc = WordCloud(
        font_path="/usr/share/fonts/truetype/nanum/NanumGothic.ttf",  # ÌïÑÏöîÏãú ÏúàÎèÑÏö∞ Í≤ΩÎ°ú ÏàòÏ†ï
        background_color="white",
        width=800,
        height=400
    ).generate_from_frequencies(top_keywords)

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.imshow(wc, interpolation="bilinear")
    ax.axis("off")
    st.pyplot(fig)

    # ‚ë¢ Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞ÅÌôî
    st.subheader("‚ë¢ Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûê ÎÑ§Ìä∏ÏõåÌÅ¨ ÏãúÍ∞ÅÌôî")
    co_occurrence = Counter()
    for row in df["Í∏∞Í¥Ä"].dropna():
        orgs = list(set([o.strip() for o in str(row).split(",") if len(o.strip()) > 1]))
        for i in range(len(orgs)):
            for j in range(i + 1, len(orgs)):
                edge = tuple(sorted([orgs[i], orgs[j]]))
                co_occurrence[edge] += 1

    filtered_edges = {pair: w for pair, w in co_occurrence.items() if w >= 5}
    G = nx.Graph()
    for (a, b), weight in filtered_edges.items():
        G.add_edge(a, b, weight=weight)

    top_nodes = sorted(G.degree, key=lambda x: x[1], reverse=True)[:20]
    G_filtered = G.subgraph([n for n, _ in top_nodes])
    pos = nx.spring_layout(G_filtered, seed=42)

    edge_x, edge_y = [], []
    for edge in G_filtered.edges():
        x0, y0 = pos[edge[0]]
        x1, y1 = pos[edge[1]]
        edge_x += [x0, x1, None]
        edge_y += [y0, y1, None]

    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color="#aaa"),
        hoverinfo='none',
        mode='lines'
    )

    node_x, node_y, node_text, node_size, node_color = [], [], [], [], []
    for node in G_filtered.nodes():
        x, y = pos[node]
        degree = G_filtered.degree[node]
        node_x.append(x)
        node_y.append(y)
        node_text.append(f"{node} (Ïó∞Í≤∞ Ïàò: {degree})")
        node_size.append(5 + degree ** 1.8)
        node_color.append(degree)

    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers+text',
        text=[n for n in G_filtered.nodes()],
        textposition='top center',
        marker=dict(
            size=node_size,
            color=node_color,
            colorscale='YlGnBu',
            showscale=True,
            colorbar=dict(title='Ïó∞Í≤∞ Ïàò')
        ),
        hovertext=node_text,
        hoverinfo='text'
    )

    fig2 = go.Figure(data=[edge_trace, node_trace],
                     layout=go.Layout(
                         title="Í∏∞Í¥Ä Í∞Ñ ÎÑ§Ìä∏ÏõåÌÅ¨ Í¥ÄÍ≥ÑÎèÑ (Top 20)",
                         showlegend=False,
                         hovermode='closest',
                         xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                         yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
                     ))
    st.plotly_chart(fig2, use_container_width=True)